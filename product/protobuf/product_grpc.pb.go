// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: protobuf/product.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_CreateCategory_FullMethodName              = "/product.ProductService/CreateCategory"
	ProductService_GetCategoryTree_FullMethodName             = "/product.ProductService/GetCategoryTree"
	ProductService_GetProductBySlug_FullMethodName            = "/product.ProductService/GetProductBySlug"
	ProductService_CreateColor_FullMethodName                 = "/product.ProductService/CreateColor"
	ProductService_CreateSize_FullMethodName                  = "/product.ProductService/CreateSize"
	ProductService_GetProductsByCategory_FullMethodName       = "/product.ProductService/GetProductsByCategory"
	ProductService_CreateTag_FullMethodName                   = "/product.ProductService/CreateTag"
	ProductService_GetAllCategoriesAdmin_FullMethodName       = "/product.ProductService/GetAllCategoriesAdmin"
	ProductService_GetCategoryById_FullMethodName             = "/product.ProductService/GetCategoryById"
	ProductService_UpdateCategory_FullMethodName              = "/product.ProductService/UpdateCategory"
	ProductService_GetAllColorsAdmin_FullMethodName           = "/product.ProductService/GetAllColorsAdmin"
	ProductService_GetAllSizesAdmin_FullMethodName            = "/product.ProductService/GetAllSizesAdmin"
	ProductService_GetAllTagsAdmin_FullMethodName             = "/product.ProductService/GetAllTagsAdmin"
	ProductService_UpdateTag_FullMethodName                   = "/product.ProductService/UpdateTag"
	ProductService_GetAllColors_FullMethodName                = "/product.ProductService/GetAllColors"
	ProductService_GetAllSizes_FullMethodName                 = "/product.ProductService/GetAllSizes"
	ProductService_GetAllTags_FullMethodName                  = "/product.ProductService/GetAllTags"
	ProductService_CreateProduct_FullMethodName               = "/product.ProductService/CreateProduct"
	ProductService_GetCategoriesNoChild_FullMethodName        = "/product.ProductService/GetCategoriesNoChild"
	ProductService_GetProductById_FullMethodName              = "/product.ProductService/GetProductById"
	ProductService_GetAllProductsAdmin_FullMethodName         = "/product.ProductService/GetAllProductsAdmin"
	ProductService_UpdateProduct_FullMethodName               = "/product.ProductService/UpdateProduct"
	ProductService_DeleteProduct_FullMethodName               = "/product.ProductService/DeleteProduct"
	ProductService_DeleteProducts_FullMethodName              = "/product.ProductService/DeleteProducts"
	ProductService_PermanentlyDeleteCategory_FullMethodName   = "/product.ProductService/PermanentlyDeleteCategory"
	ProductService_PermanentlyDeleteCategories_FullMethodName = "/product.ProductService/PermanentlyDeleteCategories"
	ProductService_GetCategoriesNoProduct_FullMethodName      = "/product.ProductService/GetCategoriesNoProduct"
	ProductService_UpdateColor_FullMethodName                 = "/product.ProductService/UpdateColor"
	ProductService_UpdateSize_FullMethodName                  = "/product.ProductService/UpdateSize"
	ProductService_DeleteColor_FullMethodName                 = "/product.ProductService/DeleteColor"
	ProductService_DeleteSize_FullMethodName                  = "/product.ProductService/DeleteSize"
	ProductService_DeleteColors_FullMethodName                = "/product.ProductService/DeleteColors"
	ProductService_DeleteSizes_FullMethodName                 = "/product.ProductService/DeleteSizes"
	ProductService_GetDeletedProducts_FullMethodName          = "/product.ProductService/GetDeletedProducts"
	ProductService_GetDeletedProductById_FullMethodName       = "/product.ProductService/GetDeletedProductById"
	ProductService_GetDeletedColors_FullMethodName            = "/product.ProductService/GetDeletedColors"
	ProductService_GetDeletedSizes_FullMethodName             = "/product.ProductService/GetDeletedSizes"
	ProductService_GetDeletedTags_FullMethodName              = "/product.ProductService/GetDeletedTags"
	ProductService_DeleteTag_FullMethodName                   = "/product.ProductService/DeleteTag"
	ProductService_DeleteTags_FullMethodName                  = "/product.ProductService/DeleteTags"
	ProductService_RestoreProduct_FullMethodName              = "/product.ProductService/RestoreProduct"
	ProductService_RestoreProducts_FullMethodName             = "/product.ProductService/RestoreProducts"
	ProductService_RestoreColor_FullMethodName                = "/product.ProductService/RestoreColor"
	ProductService_RestoreColors_FullMethodName               = "/product.ProductService/RestoreColors"
	ProductService_RestoreSize_FullMethodName                 = "/product.ProductService/RestoreSize"
	ProductService_RestoreSizes_FullMethodName                = "/product.ProductService/RestoreSizes"
	ProductService_RestoreTag_FullMethodName                  = "/product.ProductService/RestoreTag"
	ProductService_RestoreTags_FullMethodName                 = "/product.ProductService/RestoreTags"
	ProductService_PermanentlyDeleteProduct_FullMethodName    = "/product.ProductService/PermanentlyDeleteProduct"
	ProductService_PermanentlyDeleteProducts_FullMethodName   = "/product.ProductService/PermanentlyDeleteProducts"
	ProductService_PermanentlyDeleteColor_FullMethodName      = "/product.ProductService/PermanentlyDeleteColor"
	ProductService_PermanentlyDeleteColors_FullMethodName     = "/product.ProductService/PermanentlyDeleteColors"
	ProductService_PermanentlyDeleteSize_FullMethodName       = "/product.ProductService/PermanentlyDeleteSize"
	ProductService_PermanentlyDeleteSizes_FullMethodName      = "/product.ProductService/PermanentlyDeleteSizes"
	ProductService_PermanentlyDeleteTag_FullMethodName        = "/product.ProductService/PermanentlyDeleteTag"
	ProductService_PermanentlyDeleteTags_FullMethodName       = "/product.ProductService/PermanentlyDeleteTags"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetCategoryTree(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*CategoryTreeResponse, error)
	GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*ProductPublicResponse, error)
	CreateColor(ctx context.Context, in *CreateColorRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetProductsByCategory(ctx context.Context, in *GetProductsByCategoryRequest, opts ...grpc.CallOption) (*ProductsPublicResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetAllCategoriesAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryAdminDetailsResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryAdminDetailsResponse, error)
	GetAllColorsAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsAdminResponse, error)
	GetAllSizesAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesAdminResponse, error)
	GetAllTagsAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsAdminResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdatedResponse, error)
	GetAllColors(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsPublicResponse, error)
	GetAllSizes(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesPublicResponse, error)
	GetAllTags(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsPublicResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetCategoriesNoChild(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error)
	GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error)
	GetAllProductsAdmin(ctx context.Context, in *GetAllProductsAdminRequest, opts ...grpc.CallOption) (*ProductsAdminResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteProducts(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteCategory(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteCategories(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	GetCategoriesNoProduct(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error)
	UpdateColor(ctx context.Context, in *UpdateColorRequest, opts ...grpc.CallOption) (*UpdatedResponse, error)
	UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdatedResponse, error)
	DeleteColor(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteSize(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteColors(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteSizes(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	GetDeletedProducts(ctx context.Context, in *GetAllProductsAdminRequest, opts ...grpc.CallOption) (*ProductsAdminResponse, error)
	GetDeletedProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error)
	GetDeletedColors(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsAdminResponse, error)
	GetDeletedSizes(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesAdminResponse, error)
	GetDeletedTags(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsAdminResponse, error)
	DeleteTag(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteTags(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	RestoreProduct(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreProducts(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreColor(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreColors(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreSize(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreSizes(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreTag(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreTags(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	PermanentlyDeleteProduct(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteProducts(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteColor(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteColors(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteSize(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteSizes(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteTag(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteTags(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoryTree(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*CategoryTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryTreeResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCategoryTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*ProductPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductPublicResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductBySlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateColor(ctx context.Context, in *CreateColorRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductsByCategory(ctx context.Context, in *GetProductsByCategoryRequest, opts ...grpc.CallOption) (*ProductsPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsPublicResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllCategoriesAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseCategoriesResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllCategoriesAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryAdminDetailsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCategoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryAdminDetailsResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllColorsAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColorsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllColorsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllSizesAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SizesAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllSizesAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllTagsAdmin(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllTagsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatedResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllColors(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColorsPublicResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllSizes(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SizesPublicResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllTags(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagsPublicResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoriesNoChild(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseCategoriesResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCategoriesNoChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductAdminDetailsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllProductsAdmin(ctx context.Context, in *GetAllProductsAdminRequest, opts ...grpc.CallOption) (*ProductsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAllProductsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductAdminDetailsResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProducts(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteCategory(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteCategories(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoriesNoProduct(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*BaseCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseCategoriesResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCategoriesNoProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateColor(ctx context.Context, in *UpdateColorRequest, opts ...grpc.CallOption) (*UpdatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatedResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatedResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteColor(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteSize(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteColors(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteSizes(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDeletedProducts(ctx context.Context, in *GetAllProductsAdminRequest, opts ...grpc.CallOption) (*ProductsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetDeletedProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDeletedProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*ProductAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductAdminDetailsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetDeletedProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDeletedColors(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*ColorsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColorsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetDeletedColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDeletedSizes(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*SizesAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SizesAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetDeletedSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDeletedTags(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*TagsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagsAdminResponse)
	err := c.cc.Invoke(ctx, ProductService_GetDeletedTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteTag(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteTags(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreProduct(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreProducts(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreColor(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreColors(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreSize(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreSizes(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreTag(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreTags(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, ProductService_RestoreTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteProduct(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteProducts(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteColor(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteColors(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteSize(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteSizes(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteTag(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PermanentlyDeleteTags(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, ProductService_PermanentlyDeleteTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreatedResponse, error)
	GetCategoryTree(context.Context, *GetManyRequest) (*CategoryTreeResponse, error)
	GetProductBySlug(context.Context, *GetProductBySlugRequest) (*ProductPublicResponse, error)
	CreateColor(context.Context, *CreateColorRequest) (*CreatedResponse, error)
	CreateSize(context.Context, *CreateSizeRequest) (*CreatedResponse, error)
	GetProductsByCategory(context.Context, *GetProductsByCategoryRequest) (*ProductsPublicResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreatedResponse, error)
	GetAllCategoriesAdmin(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error)
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryAdminDetailsResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryAdminDetailsResponse, error)
	GetAllColorsAdmin(context.Context, *GetManyRequest) (*ColorsAdminResponse, error)
	GetAllSizesAdmin(context.Context, *GetManyRequest) (*SizesAdminResponse, error)
	GetAllTagsAdmin(context.Context, *GetManyRequest) (*TagsAdminResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdatedResponse, error)
	GetAllColors(context.Context, *GetManyRequest) (*ColorsPublicResponse, error)
	GetAllSizes(context.Context, *GetManyRequest) (*SizesPublicResponse, error)
	GetAllTags(context.Context, *GetManyRequest) (*TagsPublicResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreatedResponse, error)
	GetCategoriesNoChild(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error)
	GetProductById(context.Context, *GetProductByIdRequest) (*ProductAdminDetailsResponse, error)
	GetAllProductsAdmin(context.Context, *GetAllProductsAdminRequest) (*ProductsAdminResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*ProductAdminDetailsResponse, error)
	DeleteProduct(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeleteProducts(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	PermanentlyDeleteCategory(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteCategories(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	GetCategoriesNoProduct(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error)
	UpdateColor(context.Context, *UpdateColorRequest) (*UpdatedResponse, error)
	UpdateSize(context.Context, *UpdateSizeRequest) (*UpdatedResponse, error)
	DeleteColor(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeleteSize(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeleteColors(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	DeleteSizes(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	GetDeletedProducts(context.Context, *GetAllProductsAdminRequest) (*ProductsAdminResponse, error)
	GetDeletedProductById(context.Context, *GetProductByIdRequest) (*ProductAdminDetailsResponse, error)
	GetDeletedColors(context.Context, *GetManyRequest) (*ColorsAdminResponse, error)
	GetDeletedSizes(context.Context, *GetManyRequest) (*SizesAdminResponse, error)
	GetDeletedTags(context.Context, *GetManyRequest) (*TagsAdminResponse, error)
	DeleteTag(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeleteTags(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	RestoreProduct(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestoreProducts(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	RestoreColor(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestoreColors(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	RestoreSize(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestoreSizes(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	RestoreTag(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestoreTags(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	PermanentlyDeleteProduct(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteProducts(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	PermanentlyDeleteColor(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteColors(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	PermanentlyDeleteSize(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteSizes(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	PermanentlyDeleteTag(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteTags(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServiceServer) GetCategoryTree(context.Context, *GetManyRequest) (*CategoryTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryTree not implemented")
}
func (UnimplementedProductServiceServer) GetProductBySlug(context.Context, *GetProductBySlugRequest) (*ProductPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySlug not implemented")
}
func (UnimplementedProductServiceServer) CreateColor(context.Context, *CreateColorRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColor not implemented")
}
func (UnimplementedProductServiceServer) CreateSize(context.Context, *CreateSizeRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSize not implemented")
}
func (UnimplementedProductServiceServer) GetProductsByCategory(context.Context, *GetProductsByCategoryRequest) (*ProductsPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedProductServiceServer) GetAllCategoriesAdmin(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategoriesAdmin not implemented")
}
func (UnimplementedProductServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedProductServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServiceServer) GetAllColorsAdmin(context.Context, *GetManyRequest) (*ColorsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllColorsAdmin not implemented")
}
func (UnimplementedProductServiceServer) GetAllSizesAdmin(context.Context, *GetManyRequest) (*SizesAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSizesAdmin not implemented")
}
func (UnimplementedProductServiceServer) GetAllTagsAdmin(context.Context, *GetManyRequest) (*TagsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTagsAdmin not implemented")
}
func (UnimplementedProductServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedProductServiceServer) GetAllColors(context.Context, *GetManyRequest) (*ColorsPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllColors not implemented")
}
func (UnimplementedProductServiceServer) GetAllSizes(context.Context, *GetManyRequest) (*SizesPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSizes not implemented")
}
func (UnimplementedProductServiceServer) GetAllTags(context.Context, *GetManyRequest) (*TagsPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTags not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) GetCategoriesNoChild(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesNoChild not implemented")
}
func (UnimplementedProductServiceServer) GetProductById(context.Context, *GetProductByIdRequest) (*ProductAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedProductServiceServer) GetAllProductsAdmin(context.Context, *GetAllProductsAdminRequest) (*ProductsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProductsAdmin not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*ProductAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProducts(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProducts not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteCategory(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteCategory not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteCategories(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteCategories not implemented")
}
func (UnimplementedProductServiceServer) GetCategoriesNoProduct(context.Context, *GetManyRequest) (*BaseCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesNoProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateColor(context.Context, *UpdateColorRequest) (*UpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColor not implemented")
}
func (UnimplementedProductServiceServer) UpdateSize(context.Context, *UpdateSizeRequest) (*UpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSize not implemented")
}
func (UnimplementedProductServiceServer) DeleteColor(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColor not implemented")
}
func (UnimplementedProductServiceServer) DeleteSize(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSize not implemented")
}
func (UnimplementedProductServiceServer) DeleteColors(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColors not implemented")
}
func (UnimplementedProductServiceServer) DeleteSizes(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSizes not implemented")
}
func (UnimplementedProductServiceServer) GetDeletedProducts(context.Context, *GetAllProductsAdminRequest) (*ProductsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedProducts not implemented")
}
func (UnimplementedProductServiceServer) GetDeletedProductById(context.Context, *GetProductByIdRequest) (*ProductAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedProductById not implemented")
}
func (UnimplementedProductServiceServer) GetDeletedColors(context.Context, *GetManyRequest) (*ColorsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedColors not implemented")
}
func (UnimplementedProductServiceServer) GetDeletedSizes(context.Context, *GetManyRequest) (*SizesAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedSizes not implemented")
}
func (UnimplementedProductServiceServer) GetDeletedTags(context.Context, *GetManyRequest) (*TagsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedTags not implemented")
}
func (UnimplementedProductServiceServer) DeleteTag(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedProductServiceServer) DeleteTags(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTags not implemented")
}
func (UnimplementedProductServiceServer) RestoreProduct(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProduct not implemented")
}
func (UnimplementedProductServiceServer) RestoreProducts(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProducts not implemented")
}
func (UnimplementedProductServiceServer) RestoreColor(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreColor not implemented")
}
func (UnimplementedProductServiceServer) RestoreColors(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreColors not implemented")
}
func (UnimplementedProductServiceServer) RestoreSize(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSize not implemented")
}
func (UnimplementedProductServiceServer) RestoreSizes(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSizes not implemented")
}
func (UnimplementedProductServiceServer) RestoreTag(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTag not implemented")
}
func (UnimplementedProductServiceServer) RestoreTags(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTags not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteProduct(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteProducts(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteProducts not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteColor(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteColor not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteColors(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteColors not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteSize(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteSize not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteSizes(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteSizes not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteTag(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteTag not implemented")
}
func (UnimplementedProductServiceServer) PermanentlyDeleteTags(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteTags not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoryTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoryTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategoryTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoryTree(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductBySlug(ctx, req.(*GetProductBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateColor(ctx, req.(*CreateColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateSize(ctx, req.(*CreateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductsByCategory(ctx, req.(*GetProductsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllCategoriesAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllCategoriesAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllCategoriesAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllCategoriesAdmin(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllColorsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllColorsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllColorsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllColorsAdmin(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllSizesAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllSizesAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllSizesAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllSizesAdmin(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllTagsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllTagsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllTagsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllTagsAdmin(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllColors(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllSizes(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllTags(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoriesNoChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoriesNoChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategoriesNoChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoriesNoChild(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllProductsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllProductsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllProductsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllProductsAdmin(ctx, req.(*GetAllProductsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProducts(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteCategory(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteCategories(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoriesNoProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoriesNoProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategoriesNoProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoriesNoProduct(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateColor(ctx, req.(*UpdateColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateSize(ctx, req.(*UpdateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteColor(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteSize(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteColors(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteSizes(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDeletedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDeletedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetDeletedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDeletedProducts(ctx, req.(*GetAllProductsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDeletedProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDeletedProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetDeletedProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDeletedProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDeletedColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDeletedColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetDeletedColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDeletedColors(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDeletedSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDeletedSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetDeletedSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDeletedSizes(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDeletedTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDeletedTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetDeletedTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDeletedTags(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteTag(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteTags(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreProduct(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreProducts(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreColor(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreColors(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreSize(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreSizes(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreTag(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreTags(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteProduct(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteProducts(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteColor(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteColors(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteSize(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteSizes(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteTag(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PermanentlyDeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PermanentlyDeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PermanentlyDeleteTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PermanentlyDeleteTags(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _ProductService_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategoryTree",
			Handler:    _ProductService_GetCategoryTree_Handler,
		},
		{
			MethodName: "GetProductBySlug",
			Handler:    _ProductService_GetProductBySlug_Handler,
		},
		{
			MethodName: "CreateColor",
			Handler:    _ProductService_CreateColor_Handler,
		},
		{
			MethodName: "CreateSize",
			Handler:    _ProductService_CreateSize_Handler,
		},
		{
			MethodName: "GetProductsByCategory",
			Handler:    _ProductService_GetProductsByCategory_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ProductService_CreateTag_Handler,
		},
		{
			MethodName: "GetAllCategoriesAdmin",
			Handler:    _ProductService_GetAllCategoriesAdmin_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _ProductService_GetCategoryById_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetAllColorsAdmin",
			Handler:    _ProductService_GetAllColorsAdmin_Handler,
		},
		{
			MethodName: "GetAllSizesAdmin",
			Handler:    _ProductService_GetAllSizesAdmin_Handler,
		},
		{
			MethodName: "GetAllTagsAdmin",
			Handler:    _ProductService_GetAllTagsAdmin_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ProductService_UpdateTag_Handler,
		},
		{
			MethodName: "GetAllColors",
			Handler:    _ProductService_GetAllColors_Handler,
		},
		{
			MethodName: "GetAllSizes",
			Handler:    _ProductService_GetAllSizes_Handler,
		},
		{
			MethodName: "GetAllTags",
			Handler:    _ProductService_GetAllTags_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "GetCategoriesNoChild",
			Handler:    _ProductService_GetCategoriesNoChild_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _ProductService_GetProductById_Handler,
		},
		{
			MethodName: "GetAllProductsAdmin",
			Handler:    _ProductService_GetAllProductsAdmin_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "DeleteProducts",
			Handler:    _ProductService_DeleteProducts_Handler,
		},
		{
			MethodName: "PermanentlyDeleteCategory",
			Handler:    _ProductService_PermanentlyDeleteCategory_Handler,
		},
		{
			MethodName: "PermanentlyDeleteCategories",
			Handler:    _ProductService_PermanentlyDeleteCategories_Handler,
		},
		{
			MethodName: "GetCategoriesNoProduct",
			Handler:    _ProductService_GetCategoriesNoProduct_Handler,
		},
		{
			MethodName: "UpdateColor",
			Handler:    _ProductService_UpdateColor_Handler,
		},
		{
			MethodName: "UpdateSize",
			Handler:    _ProductService_UpdateSize_Handler,
		},
		{
			MethodName: "DeleteColor",
			Handler:    _ProductService_DeleteColor_Handler,
		},
		{
			MethodName: "DeleteSize",
			Handler:    _ProductService_DeleteSize_Handler,
		},
		{
			MethodName: "DeleteColors",
			Handler:    _ProductService_DeleteColors_Handler,
		},
		{
			MethodName: "DeleteSizes",
			Handler:    _ProductService_DeleteSizes_Handler,
		},
		{
			MethodName: "GetDeletedProducts",
			Handler:    _ProductService_GetDeletedProducts_Handler,
		},
		{
			MethodName: "GetDeletedProductById",
			Handler:    _ProductService_GetDeletedProductById_Handler,
		},
		{
			MethodName: "GetDeletedColors",
			Handler:    _ProductService_GetDeletedColors_Handler,
		},
		{
			MethodName: "GetDeletedSizes",
			Handler:    _ProductService_GetDeletedSizes_Handler,
		},
		{
			MethodName: "GetDeletedTags",
			Handler:    _ProductService_GetDeletedTags_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ProductService_DeleteTag_Handler,
		},
		{
			MethodName: "DeleteTags",
			Handler:    _ProductService_DeleteTags_Handler,
		},
		{
			MethodName: "RestoreProduct",
			Handler:    _ProductService_RestoreProduct_Handler,
		},
		{
			MethodName: "RestoreProducts",
			Handler:    _ProductService_RestoreProducts_Handler,
		},
		{
			MethodName: "RestoreColor",
			Handler:    _ProductService_RestoreColor_Handler,
		},
		{
			MethodName: "RestoreColors",
			Handler:    _ProductService_RestoreColors_Handler,
		},
		{
			MethodName: "RestoreSize",
			Handler:    _ProductService_RestoreSize_Handler,
		},
		{
			MethodName: "RestoreSizes",
			Handler:    _ProductService_RestoreSizes_Handler,
		},
		{
			MethodName: "RestoreTag",
			Handler:    _ProductService_RestoreTag_Handler,
		},
		{
			MethodName: "RestoreTags",
			Handler:    _ProductService_RestoreTags_Handler,
		},
		{
			MethodName: "PermanentlyDeleteProduct",
			Handler:    _ProductService_PermanentlyDeleteProduct_Handler,
		},
		{
			MethodName: "PermanentlyDeleteProducts",
			Handler:    _ProductService_PermanentlyDeleteProducts_Handler,
		},
		{
			MethodName: "PermanentlyDeleteColor",
			Handler:    _ProductService_PermanentlyDeleteColor_Handler,
		},
		{
			MethodName: "PermanentlyDeleteColors",
			Handler:    _ProductService_PermanentlyDeleteColors_Handler,
		},
		{
			MethodName: "PermanentlyDeleteSize",
			Handler:    _ProductService_PermanentlyDeleteSize_Handler,
		},
		{
			MethodName: "PermanentlyDeleteSizes",
			Handler:    _ProductService_PermanentlyDeleteSizes_Handler,
		},
		{
			MethodName: "PermanentlyDeleteTag",
			Handler:    _ProductService_PermanentlyDeleteTag_Handler,
		},
		{
			MethodName: "PermanentlyDeleteTags",
			Handler:    _ProductService_PermanentlyDeleteTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/product.proto",
}
